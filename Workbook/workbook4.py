# -*- coding: utf-8 -*-
"""ClassWK_5_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bOkFTUPz-CJEcMlERj-QSPqy2DsEwEBV

**Computation on NumPy Arrays**
"""

import numpy as np
def compute_reciprocals(values):
  output=np.empty(len(values))
  for i in range(len(values)):
     output[i]=1.0 / values[i]
  return output

values = np.random.randint(1,5,size=5)
print("Values:",values)
compute_reciprocals(values)

big_array = np.random.randint(1,100,size=250)
compute_reciprocals(big_array)

print(np.arange(1, 6))
print(np.arange(5))
np.arange(5)/np.arange(1,6)

x=np.arange(8)
print(x)
x=np.arange(8).reshape((4,2))
print(x)
xx= 2**x
print(xx)

"""**Array Arithmetic**"""

x=np.arange(5)
print("x   =",x)
print("x+3=",x+3)
print("x-3=",x-3)
print("x*2=",x*2)
print("x/2=",x/2)
print("x//2=",x//2)
print("-x =",-x)
print("x**2=",x**2)
print("X%2=", x%2)

-(0.3*x+1)**2   #Order of precedence

x=np.arange(5)
print("x   =",x)
print("x+3=",np.add(x,2))  #np.add
print("x-3=",np.subtract(x,3))  #np.subtract
print("x*2=",x*2)  #np.multiply
print("x/2=",x/2)  #np.divide
print("x//2=",x//2)  #np.floor_divide
print("-x =",-x)    #np.negative
print("x**2=",x**2) #np.power
print("X%2=", x%2)  #np.mod

#Printing Absolute Values
x=np.array([-5, -6, 0, 6, 5])
abs(x)

np.absolute(x)

np.abs(x)

"""**Exponents and Logarithms**"""

x = [1, 2, 3]
print("x     =", x)
print("e^x   =", np.exp(x)) #constant e value, 2.718
print("2^x   =", np.exp2(x))
print("3^x   =", np.power(3, x))
2.718**2

x = [1, 2, 4, 10]
print("x        =", x)
print("ln(x)    =", np.log(x))
print("log2(x)  =", np.log2(x))
print("log10(x) =", np.log10(x))

x = [0, 0.001, 0.01, 0.1]
print("exp(x) - 1 =", np.expm1(x))  #To give more precise values
print("log(1 + x) =", np.log1p(x)) #gives the natural log value of x +1

"""**Trigonometric Functions**"""

print(np.linspace(0,1,5))
print(np.arange(0,10,2))
theta=np.linspace(0,np.pi,3)
print("theta=",theta)
print("sin(theta)=",np.sin(theta))
print("cos(theta)=",np.cos(theta))
print("tan(theta)=",np.tan(theta))

x=[-1,0,1]
print("x=",x)
print("arcsin(x)=",np.arcsin(x)) #inverse of trignometric sine
print("arccos(x)=",np.arccos(x))
print("arctan(x)=",np.arctan(x))

"""**Advanced Universal Functions Features**"""

x=np.arange(5)
y=np.empty(5)
np.multiply(x,10,out=y)
print(y)
print(y.dtype)
yy = np.array(y, dtype='int16')  #change dtype
print(yy)
print(yy.dtype)

y=np.zeros(10)
print(y)
np.power(2,x,out=y[1::2])
print(y)
print(x)

#Aggregates
x=np.arange(1,6)
print(x)
np.add.reduce(x)

np.multiply.reduce(x)

#for accumulating intermediate results
np.add.accumulate(x)

np.multiply.accumulate(x)

x=np.arange(1,6)
np.multiply.outer(x,x) #like multiplication tables

#Summing the values in the array
y=np.random.random(100)
print(y)
sum(y)

np.sum(y)

big_array=np.random.rand(100000)
# %timeit sum(big_array)
# %timeit np.sum(big_array)
min(big_array),max(big_array)

np.min(big_array), np.max(big_array)

zz=np.random.random((3,4))
zz

zz.sum()

zz.min(axis=0) #min value - Column wise

zz.min(axis=1)  #min value row wise

import pandas as pd
data=pd.read_csv('/content/president_heights.csv')
heights=np.array(data['height(cm)'])
print(heights)

print("Mean block-size:       ", heights.mean())
print("Standard deviation:", heights.std())
print("Minimum block-size:    ", heights.min())
print("Maximum block-size:    ", heights.max())

print("25th percentile:   ", np.percentile(heights, 25))
print("Median:            ", np.median(heights))
print("75th percentile:   ", np.percentile(heights, 75))

import matplotlib.pyplot as plt
import seaborn;

plt.hist(heights)
plt.title('Height Distribution of US Presidents')
plt.xlabel('height (cm)')
plt.ylabel('number');

"""# **Broadcasting**
A set of rules for applying binary ufuncs on arrays of different sizes
"""

a=np.array([0,1,2])
b=np.array([4,5,7])
a+b

a+10

x=np.ones((3,3))
x

x+a

a=np.arange(3)
b=np.arange(3)[:,np.newaxis]
print(a)
print(b)

a+b

#Broadcasting example 1:
M=np.ones((2,3))
a=np.arange(3)

M.shape

a.shape #M.shape(2,3); a,shape(1,3)--> M.shape(2,3); a.shape(2,3)

M+a

#Broadcasting example 2
a=np.arange(3).reshape(3,1)
print(a)  #pad the shape of b with ones

b=np.arange(3) #upgrade the shape to match the corresponding size of the array
print(b)

a+b

#Broadcasting Example 3
M=np.ones((3,2))
a=np.arange(3)

M+a

x=np.random.random((10,3))

xmean=x.mean(0)
xmean

x_centered=x-xmean
x_centered.mean(0)
x_centered.mean(1)

import matplotlib.pyplot as plt

#plotting two dimensional function
x = np.linspace(0, 5, 50)
y = np.linspace(0, 5, 50)[:, np.newaxis]

z = np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)

plt.imshow(z,origin='lower',extent=[0,5,0,5], cmap='viridis')
plt.colorbar()

yy=np.random.random((5,3))
print(yy)

np.arange(5)

import seaborn; seaborn.set()

rainfall=pd.read_csv('/content/Seattle2014.csv')['PRCP'].values
inches=rainfall / 254.0  #1/10mm -->inches
inches.shape

plt.hist(inches,40)

x=np.array([1,2,3,4,5,6,7,8,9,10])

x<3

x>5

x<=7

x>=7

x!=5

x==5

#Elementwise comparison of two arrays
(2*x) ==(x**2)

rng=np.random.RandomState()
x=rng.randint(10,size=(3,4))
x

x<7

#Working with boolean arrays
print(x)

np.count_nonzero(x<7)

np.sum(x<7)

np.sum(x<7,axis=1) #no. of values less than 7 in each row

np.any(x>5) #any values greater than 5

np.any(x<0)

np.all(x<5) #all values less than 5

np.all(x<10)

np.all(x==3)

np.all(x<8, axis=1) #lessthan 8 in each row

#Boolean Operators
np.sum((inches > 0.5) & (inches <1))

np.sum(~(inches <=0.5) | (inches >=1))

print("Number days without rain:      ", np.sum(inches == 0))
print("Number days with rain:         ", np.sum(inches != 0))
print("Days with more than 0.5 inches:", np.sum(inches > 0.5))
print("Rainy days with < 0.2 inches  :", np.sum((inches > 0) &
                                                (inches < 0.2)))

import numpy as np

rng=np.random.RandomState()
x=rng.randint(10,size=(3,4))
x

x>3

x[x>3] #Boolean Masking