# -*- coding: utf-8 -*-
"""ClassWk4_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gU_7IyuA6K9rkWFm0GJGh8NSOWki3vN0
"""

class Mca:
  strength=60

a1=Mca()
print(a1.strength)

"""Every class has a __init__(), which is executed when the class is initiated.

__init__() is used to assign values to object properties etc.

__init__() is automatically called every time the class is used to create a new object
"""

class Mca:
  def __init__(I_A, name, Reg_No):
    I_A.name = name
    I_A.Reg_No = Reg_No

a1 = Mca("Kevin",25)
print(a1.name)
print(a1.Reg_No)

"""Object may also contain methods. Methods in objects are functions that belong to the same object"""

class Mca:
  def __init__(I_A, name, Reg_No, section):
    I_A.name = name
    I_A.Reg_No = Reg_No
    I_A.Section = section

  def funcnew(I_A):
    print("Hello... I'm " + I_A.name)

a1 = Mca("Kevin",25,"A")
a1.funcnew()

# print(a1.name)
# print(a1.Reg_No)

a2=Mca("Ashwin",13,"B")
# a1.name="Ashwin"

del a1.Section  # delete the name property
del a2 # deleting object

class McaB:
  pass

"""**Inheritance**"""

class Mca:
  def __init__(I_A, name, course):
    I_A.name = name
    I_A.course = course

  def details(I_A):
    print(I_A.name, I_A.course)

aa=Mca("Devesh","MCA")
aa.details()

class trimester(Mca):
  pass

at= trimester("Kenneth","MCA")
at.details()

"""add __init__() to the child class will not inherit the properties of parent class"""

class trimester(Mca):
  def __init__(I_A, name, course):

class trimester(Mca):
  def __init__(I_A, name, course):
    Mca.__init__(I_A, name, course)

class trimester(Mca):
  def __init__(I_A, name, course):
    super().__init__(name, course)

class trimester(Mca):
  def __init__(I_A, name, course):
    super().__init__( name, course)
    I_A.duration=3

class trimester(Mca):
  def __init__(I_A, name, course, months):
    super().__init__( name, course)
    I_A.duration=months
aa=trimester("Adithya","MCA",3)
aa.details()

class trimester(Mca):
  def __init__(I_A, name, course, months):
    super().__init__( name, course)
    I_A.months=months

  def msg(I_A):
    print("Hello", I_A.name, "you are in", I_A.course, "for", I_A.months, "months")

xx=trimester("Aryan","MCA",3)
xx.msg()

"""**Exception Handling**"""

print("I'm in Christ")

print(b)

try:
  print(b)
except:
  print("There was an error; So Im from exception block")

# b=99
try:
  print(b)
except NameError:
  print("Variable b not found")
except:
  print("Guess the error")

# Using Else Part
try:
  print("Im from MCA A")
except:
  print("Today is Saturday")
# else:
#   print("Do we have Python Lab Today")

#using finally block
#This block will be executed even if the try block raises an errro

try:
  print(b) #check with bb
except:
  print("Is Monday Holiday??")
finally:
  print("Try and Except block is skipped; You have added finally block")

#To raise an exception
xx=16
if xx<18:
  raise Exception ("You are not Eligible to Vote")

#TypeError Message
z="Texting"
if not type(z) is int:
  raise TypeError("Enter only numbers")

#TypeError Message
z=56
if not type(z) is str:
  raise TypeError("Enter only string")